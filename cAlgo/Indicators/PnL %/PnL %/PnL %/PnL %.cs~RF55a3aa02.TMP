using System;
using System.Collections.Generic;
using System.Linq;
using cAlgo.API;

namespace cAlgo
{
    [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class PnlPercent : Indicator
    {
        [Parameter(DefaultValue = -0.1, Step = 0.01)]
        public double Percent { get; set; }

        private Dictionary<TradeType, List<Position>> _positions;
        private Dictionary<TradeType, ChartText> _chartText;

        protected override void Initialize()
        {
            Percent /= 100;

            var symbolPositions = Positions.Where(x => x.SymbolCode == Symbol.Code).ToList();
            _positions = new Dictionary<TradeType, List<Position>>
            {
                { TradeType.Buy, new List<Position>(symbolPositions.Where(x => x.TradeType == TradeType.Buy)) },
                { TradeType.Sell, new List<Position>(symbolPositions.Where(x => x.TradeType == TradeType.Sell)) }
            };
            _chartText = new Dictionary<TradeType, ChartText>
            {
                { TradeType.Buy, null },
                { TradeType.Sell, null }
            };

            CalculatePnlPrice(TradeType.Buy);
            CalculatePnlPrice(TradeType.Sell);

            Positions.Opened += args =>
            {
                if (args.Position.SymbolCode == Symbol.Code)
                {
                    _positions[args.Position.TradeType].Add(args.Position);
                    CalculatePnlPrice(args.Position.TradeType);
                }
            };

            Positions.Closed += args =>
            {
                if (_positions[args.Position.TradeType].Contains(args.Position))
                {
                    _positions[args.Position.TradeType].Remove(args.Position);
                    CalculatePnlPrice(args.Position.TradeType);
                }
            };

            Positions.Modified += args =>
            {
                if (_positions[TradeType.Buy].Contains(args.Position) || _positions[TradeType.Sell].Contains(args.Position))
                {
                    if (_positions[TradeType.Buy].Contains(args.Position) && args.Position.TradeType == TradeType.Sell)
                    {
                        _positions[TradeType.Buy].Remove(args.Position);
                        _positions[TradeType.Sell].Add(args.Position);
                    }
                    else if (_positions[TradeType.Sell].Contains(args.Position) && args.Position.TradeType == TradeType.Buy)
                    {
                        _positions[TradeType.Sell].Remove(args.Position);
                        _positions[TradeType.Buy].Add(args.Position);
                    }

                    CalculatePnlPrice(TradeType.Buy);
                    CalculatePnlPrice(TradeType.Sell);
                }
            };

            Chart.ScrollChanged += args =>
            {
                foreach (var text in _chartText.Values)
                {
                    if (text != null)
                    {
                        text.Time = MarketSeries.OpenTime[Chart.LastVisibleBarIndex];
                    }
                }
            };
        }

        private void CalculatePnlPrice(TradeType tradeType)
        {
            if (_positions[tradeType].Count == 0)
            {
                if (_chartText[tradeType] != null)
                {
                    Chart.RemoveObject(_chartText[tradeType].Name);
                    _chartText[tradeType] = null;
                }

                return;
            }

            double volume = 0, entryPrice = 0, commissions = 0, swaps = 0;
            foreach (var position in _positions[tradeType])
            {
                volume += position.VolumeInUnits;
                entryPrice += position.EntryPrice * position.VolumeInUnits;
                commissions += position.Commissions;
                swaps += position.Swap;
            }

            var pips = (Account.Balance * Percent + commissions + swaps) / (volume * Symbol.PipValue);
            var price = entryPrice / volume + pips * Symbol.PipSize * (tradeType == TradeType.Buy ? 1 : -1);
            var color = tradeType == TradeType.Buy ? Chart.ColorSettings.BuyColor : Chart.ColorSettings.SellColor;

            Chart.DrawHorizontalLine("price" + tradeType, price, color, 1, LineStyle.Dots);

            _chartText[tradeType] = Chart.DrawText("text" + tradeType, string.Format("{0}: {1:P} @{2}", tradeType, Percent, Math.Round(price, Symbol.Digits)), Chart.LastVisibleBarIndex, price, color);
            _chartText[tradeType].HorizontalAlignment = HorizontalAlignment.Left;
        }

        public override void Calculate(int index) { }
    }
}