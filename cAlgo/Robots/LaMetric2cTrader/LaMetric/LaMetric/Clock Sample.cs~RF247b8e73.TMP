using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Text;
using System.Web.Script.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Serializable]
    public class Frame
    {
        public string text { get; set; }
        public int icon { get; set; }
        public int index { get; set; }
    }

    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
    public class ClockSample : Robot
    {
        [Parameter("URL", DefaultValue = "https://dev.0x8.in.th:4343/api/v1/dev/widget/update/com.lametric.57e20c5c2e4d705a7eb94f34704db6b5/2")]
        public string Url { get; set; }

        [Parameter("Access Token", DefaultValue = "YWY4YWZkZjU0ODg4ZDMyMjMyNTkxYTZmMTdjMzdhZGQ1Yjc3ZDFkNTZmYThmMGY5ODU4ZDc5MDBjMTRlOWU5Yg==")]
        public string AccessToken { get; set; }

        protected override void OnStart()
        {
            ServicePointManager.Expect100Continue = false;
            ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback
            (
                delegate { return true; }
            );

            var frames = new[]
            {
                new Frame
                {
                    text = "Final test",
                    icon = 2867,
                    index = 0
                },
                //new Frame
                //{
                //    text = "-1.256%",
                //    icon = 7463,
                //    index = 0
                //},
                //new Frame
                //{
                //    text = "+0.325%",
                //    icon = 10699,
                //    index = 2
                //}
            };

            SendFrames(frames);
        }

        private Task<HttpResponseMessage> SendFrames(IEnumerable<Frame> frames)
        {
            var json = new JavaScriptSerializer().Serialize(new { frames });
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                RequestUri = new Uri(Url),
                Content = new StringContent(json, Encoding.UTF8, "application/json"),
                Headers =
                {
                    { "Accept", "application/json" },
                    { "X-Access-Token", AccessToken },
                    { "Cache-Control", "no-cache" }
                }
            };

            using (var client = new HttpClient())
            {
                return client.SendAsync(request);
            }
        }
    }
}