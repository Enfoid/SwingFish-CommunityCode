{
  "name": "grunt-nunit-runner",
  "version": "1.0.18",
  "description": "grunt plugin for running nunit",
  "homepage": "https://github.com/mikeobrien/grunt-nunit-runner",
  "main": "tasks/task.js",
  "bugs": {
    "url": "https://github.com/mikeobrien/grunt-nunit-runner/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mikeobrien/grunt-nunit-runner.git"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    ".net",
    "dotnet",
    "nunit"
  ],
  "scripts": {
    "test": "grunt"
  },
  "author": {
    "name": "Mike O'Brien"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "files": [
    "tasks/**/*.js",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "underscore": "~1.5.2",
    "temp": "~0.6.0",
    "sax": "~0.5.8"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "expect.js": "~0.2.0",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-release": "~0.6.0",
    "mocha": "~1.15.1",
    "grunt-mocha-test": "~0.8.1",
    "rewire": "~2.0.0",
    "temp": "~0.6.0",
    "sinon": "~1.7.3"
  },
  "peerDependencies": {
    "grunt": "0.4.x"
  },
  "readme": "# grunt-nunit-runner [![Build Status](https://api.travis-ci.org/mikeobrien/grunt-nunit-runner.png?branch=master)](https://travis-ci.org/mikeobrien/grunt-nunit-runner) [![NPM version](https://badge.fury.io/js/grunt-nunit-runner.png)](https://npmjs.org/package/grunt-nunit-runner)\nGrunt plugin for running [NUnit](http://www.nunit.org/).\nNOTE: this plugin requires Grunt 0.4.x.\n\n## Getting Started\nFrom the same directory as your project's Gruntfile and package.json, install\nthis plugin with the following command:\n\n```bash\n$ npm install grunt-nunit-runner --save-dev\n```\n\nNext add this line to your project's Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-nunit-runner');\n```\n\n## Config\nInside your `Gruntfile.js` file, add a section named `nunit`, containing\nthe test runner configuration:\n\n```js\nnunit: {\n    options: {\n\n        // The path to the NUnit bin folder. If not specified the bin\n        // folder must be in the system path.\n        path: 'c:/Program Files/NUnit/bin',\n\n        // Runs the anycpu or x86 build of NUnit. Default is anycpu. \n        // http://www.nunit.org/index.php?p=nunit-console&r=2.6.3\n        platform: 'anycpu|x86',\n\n        // Can be solutions, projects or individual assemblies. Solutions \n        // are searched for projects referencing nunit.framework.dll.\n        files: ['src/MySolution.sln', \n                'src/Tests/Tests.csproj', \n                'src/Tests/bin/Debug/Tests.dll'],\n\n        // Integrate test output with TeamCity.\n        teamcity: true|false,\n\n        // The options below map directly to the NUnit console runner. See here\n        // for more info: http://www.nunit.org/index.php?p=consoleCommandLine&r=2.6.3\n\n        // Name of the test case(s), fixture(s) or namespace(s) to run.\n        run: ['TestSuite.Unit', 'TestSuite.Integration'],\n\n        // Name of a file containing a list of the tests to run, one per line.\n        runlist: 'TestsToRun.txt',\n\n        // Project configuration (e.g.: Debug) to load.\n        config: 'Debug',\n\n        // Name of XML result file (Default: TestResult.xml)\n        result: 'TestResult.xml',\n\n        // Suppress XML result output.\n        noresult: true|false,\n\n        // File to receive test output.\n        output: 'TestOutput.txt',\n\n        // File to receive test error output.\n        err: 'TestErrors.txt',\n\n        // Work directory for output files.\n        work: 'BuildArtifacts',\n\n        // Label each test in stdOut.\n        labels: true|false,\n\n        // Set internal trace level.\n        trace: 'Off|Error|Warning|Info|Verbose',\n\n        // List of categories to include.\n        include: ['BaseLine', 'Unit'],\n\n        // List of categories to exclude.\n        exclude: ['Database', 'Network'],\n\n        // Framework version to be used for tests.\n        framework: 'net-1.1',\n\n        // Process model for tests.\n        process: 'Single|Separate|Multiple',\n\n        // AppDomain Usage for tests.\n        domain: 'None|Single|Multiple',\n\n        // Apartment for running tests (Default is MTA).\n        apartment: 'MTA|STA',\n\n        // Disable shadow copy when running in separate domain.\n        noshadow: true|false,\n\n        // Disable use of a separate thread for tests.\n        nothread: true|false,\n\n        // Base path to be used when loading the assemblies.\n        basepath: 'src',\n\n        // Additional directories to be probed when loading assemblies.\n        privatebinpath: ['lib', 'bin'],\n\n        // Set timeout for each test case in milliseconds.\n        timeout: 1000,\n\n        // Wait for input before closing console window.\n        wait: true|false,\n\n        // Do not display the logo.\n        nologo: true|false,\n\n        // Do not display progress.\n        nodots: true|false,\n\n        // Stop after the first test failure or error.\n        stoponerror: true|false,\n\n        // Erase any leftover cache files and exit.\n        cleanup: true|false\n\n    }\n}\n```\n\n## License\nMIT License",
  "_id": "grunt-nunit-runner@1.0.18",
  "_from": "grunt-nunit-runner@1.0.18",
  "dist": {
    "shasum": "9cd21923f78f09f74f975ecbab7c8665bf7fef54"
  },
  "_resolved": "https://registry.npmjs.org/grunt-nunit-runner/-/grunt-nunit-runner-1.0.18.tgz"
}
