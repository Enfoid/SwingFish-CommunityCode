<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>StreamDeckSharp</name>
    </assembly>
    <members>
        <member name="T:StreamDeckSharp.Hardware">
            <summary>
            Details about different StreamDeck Hardware
            </summary>
        </member>
        <member name="P:StreamDeckSharp.Hardware.StreamDeck">
            <summary>
            Details about the classic Stream Deck
            </summary>
        </member>
        <member name="P:StreamDeckSharp.Hardware.StreamDeckMini">
            <summary>
            Details about the Stream Deck Mini
            </summary>
        </member>
        <member name="T:StreamDeckSharp.IHardware">
            <summary>
            A compact collection of hardware specific information about a device.
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IHardware.Keys">
            <summary>
            Key layout information
            </summary>
        </member>
        <member name="M:StreamDeckSharp.Internals.IHardwareInternalInfos.ExtKeyIdToHardwareKeyId(System.Int32)">
            <summary>
            This is used to convert between keyId conventions
            </summary>
            <param name="extKeyId" />
            <returns />
            <remarks>
            The original stream deck has a pretty weird way of enumerating keys.
            Index 0 starts right top and they are enumerated right to left,
            and top to bottom. Most developers would expect it to be left-to-right
            instead of right-to-left, so we change that ;-)
            </remarks>
        </member>
        <member name="M:StreamDeckSharp.Internals.IHardwareInternalInfos.HardwareKeyIdToExtKeyId(System.Int32)">
            <summary>
            This is used to convert between keyId conventions
            </summary>
            <param name="hardwareKeyId" />
            <returns />
        </member>
        <member name="T:StreamDeckSharp.DeviceRefereceHandle">
            <summary>
            Device information about Stream Deck
            </summary>
        </member>
        <member name="P:StreamDeckSharp.DeviceRefereceHandle.DevicePath">
            <summary>
            Unique identifier for human interface device
            </summary>
        </member>
        <member name="M:StreamDeckSharp.DeviceRefereceHandle.Open">
            <summary>
            Opens the StreamDeck handle
            </summary>
            <returns>Returns an <see cref="T:OpenMacroBoard.SDK.IMacroBoard" /> reference</returns>
        </member>
        <member name="T:StreamDeckSharp.Exceptions.StreamDeckNotFoundException">
            <summary>
            Is thrown if no device could be found
            </summary>
        </member>
        <member name="T:StreamDeckSharp.Exceptions.StreamDeckException">
            <summary>
            Base class for all StreamDeckSharp Exceptions
            </summary>
        </member>
        <member name="T:StreamDeckSharp.IStreamDeckBoard">
            <inheritdoc />
        </member>
        <member name="P:StreamDeckSharp.IStreamDeckBoard.Keys">
            <inheritdoc />
        </member>
        <member name="M:StreamDeckSharp.IStreamDeckBoard.GetFirmwareVersion">
            <summary>
            Gets the firmware version
            </summary>
            <returns>Returns the firmware version as string</returns>
        </member>
        <member name="M:StreamDeckSharp.IStreamDeckBoard.GetSerialNumber">
            <summary>
            Gets the serial number
            </summary>
            <returns>Returns the serial number as string</returns>
        </member>
        <member name="T:StreamDeckSharp.IStreamDeckRefHandle">
            <inheritdoc />
        </member>
        <member name="M:StreamDeckSharp.IStreamDeckRefHandle.Open">
            <inheritdoc />
        </member>
        <member name="T:StreamDeckSharp.IUsbHidHardware">
            <summary>
            USB HID specific hardware information
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IUsbHidHardware.UsbVendorId">
            <summary>
            USB vendor id
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IUsbHidHardware.UsbProductId">
            <summary>
            USB product id
            </summary>
        </member>
        <member name="T:StreamDeckSharp.StreamDeck">
            <summary>
            This is a factorioy class to create IStreamDeck References
            </summary>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.OpenDevice(StreamDeckSharp.IUsbHidHardware[])">
            <summary>
            Enumerates connected Stream Decks and returns the first one.
            </summary>
            <returns>The default <see cref="T:StreamDeckSharp.IStreamDeckBoard" /> HID</returns>
            <exception cref="T:StreamDeckSharp.Exceptions.StreamDeckNotFoundException">Thrown if no Stream Deck is found</exception>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.OpenDevice(System.String)">
            <summary>
            Get <see cref="T:StreamDeckSharp.IStreamDeckBoard" /> with given <paramref name="devicePath" /></summary>
            <param name="devicePath" />
            <returns>
                <see cref="T:StreamDeckSharp.IStreamDeckBoard" /> specified by <paramref name="devicePath" /></returns>
            <exception cref="T:StreamDeckSharp.Exceptions.StreamDeckNotFoundException">Thrown if no Stream Deck is found</exception>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.EnumerateDevices(StreamDeckSharp.IUsbHidHardware[])">
            <summary>
            Enumerate Elgato Stream Deck Devices that match a given type.
            </summary>
            <param name="hardware">If no types or null is passed passed as argument, all known types are found</param>
            <returns />
        </member>
    </members>
</doc>